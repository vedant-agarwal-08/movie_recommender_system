# -*- coding: utf-8 -*-
"""movie-recommender-system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKgjG97VdhUc_xJKawus18rFsQJAmQop
"""

import numpy as np
import pandas as pd

movies=pd.read_csv('tmdb_5000_movies.csv')
credits=pd.read_csv('tmdb_5000_credits.csv')

movies.head() #to get first few rows of movie

credits.head() #to get the first row of credits

movies=movies.merge(credits,on='title') #to merge both the datasets(movies & credits) on the basis of title

movies.head(1)

#genre
#id
#keywords
#title
#overview
#cast
#crew
movies=movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.info() #to get the headers

movies.head()

movies.isnull().sum() #to check if any column has empty data

movies.dropna(inplace=True) #if empty data is present remove it

movies.duplicated().sum() # to check if there is any duplicated data present

movies.iloc[0].genres

#[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]
#['Action','Adventure','Fantasy','Science Fiction']
#[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}] is a string of list
#which cannot be parsed directly therefore we are using ast.literal_eval to convert that string into a list
import ast
def convert(obj):
  L=[]
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres']=movies['genres'].apply(convert)

movies.head()

movies['keywords']=movies['keywords'].apply(convert)

import ast
def convert3(obj):
  L=[]
  counter=0
  for i in ast.literal_eval(obj):
    if counter!=3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

movies['cast']=movies['cast'].apply(convert3)

movies.head()

import ast
def fetch_director(obj):
  L=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      L.append(i['name'])
      break
  return L

movies['crew']=movies['crew'].apply(fetch_director)

movies.head()

movies['overview']=movies['overview'].apply(lambda x:x.split()) #to convert the overview from string to list

#for removing the spaces between the words for ex: science fiction= sciencefiction
movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","")for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","")for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","")for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","")for i in x])

movies.head()

movies['tags']=movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']

movies.head()

new_df=movies[['movie_id','title','tags']]
new_df['tags']=new_df['tags'].apply(lambda x:" ".join(x))

new_df.head()

import nltk

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

#we have words like loving,loved,love so to convert all those words to one single word love we will perform stemming
def stem(text):
  y=[]
  for i in text.split():
    y.append(ps.stem(i))
  return " ".join(y)

new_df['tags']=new_df['tags'].apply(stem)

new_df['tags']=new_df['tags'].apply(lambda x:x.lower())

#Vectorization:- Now we will perform vectorization which include the concatenation of all the tags together and finding the most common words
#between the tags to give out the recommended movie
#we will perform the concatenation of all the tags by using the scikit learn library called countvectorizer
from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000,stop_words='english')

vectors=cv.fit_transform(new_df['tags']).toarray()

vectors

ps.stem('loving')

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)

similarity

sorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])[1:6]

def recommend(movie):
  movie_index=new_df[new_df['title']== movie].index[0]
  distances=similarity[movie_index]
  movies_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Avatar')

import pickle

pickle.dump(new_df,open('movies.pkl','wb'))

new_df['title'].values

pickle.dump(new_df.to_dict(),open('movies_dict.pkl','wb'))

pickle.dump(similarity,open('similarity.pkl','wb'))